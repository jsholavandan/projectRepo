var maze = {
    canvas: null,
    ctx: null,
    size: 60,
    tiles: [],
    playerX: 8,
    playerY: 8,
    player: null,
    food1: null,
    food2: null,
    food3: null,
    foodArray: [],
    height: 40,
    width: 45,
    button: null,
    winnerCount: 0,
    init: function () {
        this.canvas = document.getElementById('canvas');
        this.button = document.getElementById('newGame');
        this.ctx = this.canvas.getContext('2d');
        this.loadImages();
        window.addEventListener("load", this.drawBoard);
        window.addEventListener("keydown", this.handleKey);
        this.button.addEventListener('click', this.newGameHandler);
    },
    newGameHandler: function () {
        maze.tiles = [];
        maze.playerX = 8;
        maze.playerY = 8;
        maze.drawBoard();
        maze.winnerCount = 0;
    },
    loadImages: function () {
        this.player = new Image();
        this.player.src = "player.jpg";
        this.player.id = "player";
        for (var i = 0; i < 3; i++) {
            var obj = new Image();
            obj.src = "food.jpg";
            obj.id = "food" + (i + 1);
            this.foodArray.push(obj);
        }
    },
    handleKey: function (e) {
        var cell = maze.getCellObject(maze.playerY, maze.playerX);
        var x = 0;
        var y = 0;
        var newColumn = 0;
        var newRow = 0;
        var newCell = null;
        switch (e.keyCode) {
            case 37:
                newColumn = cell.col - 1;
                if (newColumn >= 0) {
                    x = maze.playerX - maze.size;
                    newCell = maze.getCellObject(maze.playerY, x);
                    if (newCell.path) {
                        maze.updateCount(newCell);
                        var newImageObj = cell.imgObject;
                        cell.imgObject = null;
                        maze.playerX = x;
                        newImageObj.x = x;
                        newCell.imgObject = newImageObj;
                    }
                }
                break;
            case 39:
                newColumn = cell.col + 1;
                if (newColumn < 10) {
                    x = maze.playerX + maze.size;
                    newCell = maze.getCellObject(maze.playerY, x);
                    if (newCell.path) {
                        maze.updateCount(newCell);
                        maze.playerX = x;
                        var newImageObj = cell.imgObject;
                        cell.imgObject = null;
                        newImageObj.x = x;
                        newCell.imgObject = newImageObj;
                    }
                }
                break;
            case 38:
                newRow = cell.row - 1;
                if (newRow >= 0) {
                    y = maze.playerY - maze.size;
                    newCell = maze.getCellObject(y, maze.playerX);
                    if (newCell.path) {
                        if (maze.updateCount(newCell)) {
                            var newImageObj = cell.imgObject;
                            cell.imgObject = null;
                            maze.playerY = y;
                            newImageObj.y = y;
                            newCell.imgObject = newImageObj;
                            maze.endGame();
                        }
                        else {
                            var newImageObj = cell.imgObject;
                            cell.imgObject = null;
                            maze.playerY = y;
                            newImageObj.y = y;
                            newCell.imgObject = newImageObj;
                        }
                    }
                }
                break;
            case 40:
                newRow = cell.row + 1;
                if (newRow < 10) {
                    y = maze.playerY + maze.size;
                    newCell = maze.getCellObject(y, maze.playerX);
                    if (newCell.path) {
                        maze.updateCount(newCell);
                        var newImageObj = cell.imgObject;
                        cell.imgObject = null;
                        maze.playerY = y;
                        newImageObj.y = y;
                        newCell.imgObject = newImageObj;
                    }
                }
                break;
        }
        maze.redrawBoard();
    },
    updateCount: function (cell) {
        if (cell.imgObject !== null && typeof cell.imgObject.role !== 'undefined') {
            if (cell.imgObject.role === 'food') {
                maze.winnerCount += 1;
                if (maze.winnerCount === 3) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
    },
    endGame: function () {
        alert("You won the Game!!!");
        maze.newGameHandler();
    },
    getCellObject: function (row, col) {
        row = (row === 8) ? 0 : Math.floor((row - 8) / this.size);
        col = (col === 8) ? 0 : Math.floor((col - 8) / this.size);
        return maze.tiles[row][col];
    },
    drawBoard: function () {
        console.log("in drawboard");
        for (var i = 0; i < 10; i++) {
            maze.tiles[i] = [];
            for (var j = 0; j < 10; j++) {
                maze.tiles[i].push(maze.createCellObj(i, j));
                maze.drawCell(j * maze.size, i * maze.size, maze.tiles[i][j]);
            }
        }
        maze.generateMaze();
    },
    generateMaze: function () {
        for (var i = 0; i < 10; i++) {
            if (i > 0 || (i % 2) !== 0) {
                var rand = this.generateRandomNumbers(3, false);
                for (var j = 0; j < 10; j++) {
                    if (rand.indexOf(j) !== -1) {
                        var cell = this.tiles[i][j];
                        cell.path = true;
                    }
                }
            }
        }
        this.placeFood();
        this.redrawBoard();
    },
    generateRandomNumbers: function (num, even) {
        var temp = [];
        even = even || false;
        while (temp.length < num) {
            var rnd = Math.floor(Math.random() * 10);
            if (even) {
                if (rnd === 0 || (rnd % 2) === 0) {
                    if (rnd !== 0 && temp.indexOf(rnd) === -1) {
                        temp.push(rnd);
                    }
                }
            }
            else {
                if (rnd !== 0 && temp.indexOf(rnd) === -1 && rnd !== 9) {
                    temp.push(rnd);
                }
            }
        }
        return temp;
    },
    placeFood: function () {
        var rowArray = this.generateRandomNumbers(3, true);
        var colArray = this.generateRandomNumbers(3, false);
        for (var i = 0; i < this.foodArray.length; i++) {
            var cell = this.tiles[rowArray[i]][colArray[i]];
            var img = {
                id: this.foodArray[i],
                x: colArray[i] * maze.size + 8,
                y: rowArray[i] * maze.size + 8,
                role: 'food'
            };
            cell.imgObject = img;
        }
    },
    redrawBoard: function () {
        this.clearBoard();
        var size = this.size;
        for (var i = 0; i < 10; i++) {
            for (var j = 0; j < 10; j++) {
                this.drawCell(j * size, i * size, this.tiles[i][j]);
            }
        }
    },
    clearBoard: function (row) {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    },
    drawCell: function (x, y, tile) {
        var side = this.size;
        this.ctx.beginPath();
        if (!tile.path && tile.type !== 'even') {
            this.drawLine(x, y, x, y + side);
            this.drawLine(x + side, y, x + side, y + side);
            this.drawLine(x, y, x + side, y);
            this.drawLine(x, y + side, x + side, y + side);
        }
        if (tile.imgObject !== null) {
            this.ctx.drawImage(tile.imgObject.id, tile.imgObject.x, tile.imgObject.y, this.width, this.height);
        }
        this.ctx.stroke();
    },
    drawLine: function (x, y, endX, endY) {
        this.ctx.moveTo(x, y);
        this.ctx.lineTo(endX, endY);
    },
    createCellObj: function (row, col) {
        var type, path;
        if (row < 1 || (row % 2) === 0) {
            type = 'even';
            path = true;
        }
        else {
            type = "odd";
            path = false;
        }
        var img = null;
        if (row === 0 && col === 0) {
            img = {
                id: maze.player,
                x: maze.playerX,
                y: maze.playerY,
                role: 'player'
            };
        }
        var obj = {
            row: row,
            col: col,
            path: path,
            type: type,
            imgObject: img
        };
        return obj;
    }
};
maze.init();
//# sourceMappingURL=data:application/json;base64,