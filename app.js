var board = {
    canvas: null,
    tiles: [],
    ctx: null,
    visitedCells: [],
    size: 75,
    init: function () {
        this.canvas = document.getElementById('canvas');
        this.ctx = this.canvas.getContext('2d');
        this.drawBoard();
    },
    drawBoard: function () {
        for (var i = 0; i < 10; i++) {
            this.tiles[i] = [];
            for (var j = 0; j < 10; j++) {
                this.tiles[i].push(this.createCellObj(i, j));
                this.drawCell(j * this.size, i * this.size, this.tiles[i][j]);
            }
        }
        this.generateMaze(0, 0);
    },
    redrawBoard: function () {
        console.log(" redraw");
        this.clearBoard();
        for (var i = 0; i < 10; i++) {
            for (var j = 0; j < 10; j++) {
                console.log(this.tiles[i][j]);
                this.drawCell(j * this.size, i * this.size, this.tiles[i][j]);
            }
        }
    },
    generateMaze: function (row, col) {
        var currentCell = this.tiles[row][col];
        if (!currentCell.visited) {
            currentCell.visited = true;
            this.visitedCells.push(currentCell);
        }
        if (this.visitedCells.length === 0) {
            this.redrawBoard();
            return;
        }
        var neighborCell = this.findNeighbor(row, col);
        if (neighborCell !== undefined) {
            if (neighborCell.row > currentCell.row) {
                neighborCell.top = false;
                currentCell.bottom = false;
            }
            if (neighborCell.row < currentCell.row) {
                currentCell.top = false;
                neighborCell.bottom = false;
            }
            if (neighborCell.col > currentCell.col) {
                currentCell.right = false;
                neighborCell.left = false;
            }
            if (neighborCell.col < currentCell.col) {
                currentCell.left = false;
                neighborCell.right = false;
            }
            currentCell = neighborCell;
        }
        else {
            currentCell = this.visitedCells.pop();
        }
        this.generateMaze(currentCell.row, currentCell.col);
    },
    findNeighbor: function (row, col) {
        var neighborArray = [];
        var selectedCell;
        if (row >= 0 && col > 0) {
            selectedCell = this.tiles[row][col - 1];
            if (!selectedCell.visited) {
                neighborArray.push(selectedCell);
            }
        }
        if (row >= 0 && col < 9) {
            selectedCell = this.tiles[row][col + 1];
            if (!selectedCell.visited) {
                neighborArray.push(selectedCell);
            }
        }
        if (row > 0 && col >= 0) {
            selectedCell = this.tiles[row - 1][col];
            if (!selectedCell.visited) {
                neighborArray.push(selectedCell);
            }
        }
        if (row < 9 && col >= 0) {
            selectedCell = this.tiles[row + 1][col];
            if (!selectedCell.visited) {
                neighborArray.push(selectedCell);
            }
        }
        if (neighborArray.length > 0) {
            var randNum = Math.floor(Math.random() * neighborArray.length);
            return neighborArray[randNum];
        }
        else {
            return undefined;
        }
    },
    drawCell: function (x, y, tile) {
        var side = this.size;
        this.ctx.beginPath();
        if (tile.left) {
            this.drawLine(x, y, x, y + side);
        }
        if (tile.right) {
            this.drawLine(x + side, y, x + side, y + side);
        }
        if (tile.top) {
            this.drawLine(x, y, x + side, y);
        }
        if (tile.bottom) {
            this.drawLine(x, y + side, x + side, y + side);
        }
        this.ctx.stroke();
    },
    drawLine: function (x, y, endX, endY) {
        this.ctx.moveTo(x, y);
        this.ctx.lineTo(endX, endY);
    },
    createCellObj: function (row, col) {
        var obj = {
            row: row,
            col: col,
            visited: false,
            left: true,
            right: true,
            top: true,
            bottom: true
        };
        return obj;
    },
    clearBoard: function () {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
};
board.init();
//# sourceMappingURL=data:application/json;base64,